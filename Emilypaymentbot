from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from fastapi import FastAPI, Request, Response
import logging
import httpx
from datetime import datetime
from fastapi.responses import JSONResponse

# Constants
BOT_TOKEN = "8189375655:AAHsnhP49ZHqEK04uaEtcPeh3alikBhfVeY"
WEBHOOK_URL = "https://bot-1-f2wh.onrender.com/webhook"
UPTIME_MONITOR_URL = "https://bot-1-f2wh.onrender.com/uptime"
SUPPORT_CONTACT = "@ZakiVip1"
ADMIN_CHAT_ID = 7618426591  # Replace with the admin's chat ID

# Payment Information
PAYMENT_INFO = {
    "shopify": {
        "1_month": "https://5fbqad-qz.myshopify.com/cart/50086610207066:1",
        "lifetime": "https://5fbqad-qz.myshopify.com/cart/50160363766106:1",
    },
    "crypto": {"link": "https://t.me/+t5kEU2mSziQ1NTg0"},
    "paypal": "onlyvipfan@outlook.com",
}

# Logging Configuration
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("bot")

# FastAPI App
app = FastAPI()
telegram_app = None
START_TIME = datetime.now()


@app.on_event("startup")
async def startup_event():
    global telegram_app
    try:
        telegram_app = Application.builder().token(BOT_TOKEN).build()
        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(CallbackQueryHandler(handle_subscription, pattern="select_.*"))
        telegram_app.add_handler(CallbackQueryHandler(handle_payment, pattern="payment_.*"))
        telegram_app.add_handler(CallbackQueryHandler(confirm_payment, pattern="paid"))
        telegram_app.add_handler(CallbackQueryHandler(handle_back, pattern="back"))
        telegram_app.add_handler(CallbackQueryHandler(handle_support, pattern="support"))

        logger.info("Telegram Bot Initialized!")

        # Uptime Robot Monitoring
        async with httpx.AsyncClient() as client:
            await client.get(UPTIME_MONITOR_URL)
            logger.info("Uptime Monitoring Reintegrated!")

        await telegram_app.initialize()
        await telegram_app.bot.delete_webhook()
        await telegram_app.bot.set_webhook(WEBHOOK_URL)
        await telegram_app.start()
        logger.info("Bot webhook successfully set up!")

    except Exception as e:
        logger.error(f"Error during startup: {e}")


@app.post("/webhook")
async def webhook(request: Request):
    global telegram_app
    try:
        update = Update.de_json(await request.json(), telegram_app.bot)
        await telegram_app.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return {"status": "error", "details": str(e)}


@app.get("/uptime")
async def get_uptime():
    current_time = datetime.now()
    uptime_duration = current_time - START_TIME
    return JSONResponse(content={
        "status": "online",
        "uptime": str(uptime_duration),
        "start_time": START_TIME.strftime("%Y-%m-%d %H:%M:%S")
    })


@app.head("/uptime")
async def head_uptime():
    return Response(status_code=200)


# Add your original Telegram Bot handlers here...
# (no changes to the logic of handlers)
